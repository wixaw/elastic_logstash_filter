####################################################
# Source de logs
####################################################

input {

  # --------------------------------------------------------------------
  # filebeat 
  # --------------------------------------------------------------------

  beats {
    port => 5044
      host => "0.0.0.0"
      ssl => true
      ssl_certificate_authorities => ["/etc/logstash/digicert_certifs/DigiCertCA.crt"]
      ssl_certificate => "/etc/logstash/digicert_certifs/cert.crt"
      ssl_key => "/etc/logstash/digicert_certifs/cert.key"
      ssl_verify_mode => "peer"
  }

#// end input
}


####################################################
# Filtre sur les logs 
####################################################


filter
{

  # --------------------------------------------------------------------
  # Global syslog
  # --------------------------------------------------------------------

  if [fields][type] == "syslog" {

    mutate {
      add_tag => [ "syslog_parsefailure", "syslog_message_unparsed" ]
        remove_tag => [ "beats_input_codec_plain_applied" ] 
    }

    grok {
      match => [ "message", "%{SYSLOGTIMESTAMP} %{IPORHOST} %{SYSLOGPROG}: %{GREEDYDATA:syslog_message}" ]
        remove_tag => [ "syslog_parsefailure" ]
        remove_field => [ "beat"]
        remove_field => [ "source"]
        remove_field => [ "prospector"]
        remove_field => [ "offset"]
        remove_field => [ "pid"]
    }
  }

  # --------------------------------------------------------------------
  # Log systeme
  # --------------------------------------------------------------------

  if [fileset][module] == "system" {
    if [fileset][name] == "auth" {
      grok {
        match => { "message" => ["%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} %{DATA:[system][auth][ssh][method]} for (invalid user )?%{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]} ssh2(: %{GREEDYDATA:[system][auth][ssh][signature]})?",
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} user %{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]}",
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: Did not receive identification string from %{IPORHOST:[system][auth][ssh][dropped_ip]}",
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sudo(?:\[%{POSINT:[system][auth][pid]}\])?: \s*%{DATA:[system][auth][user]} :( %{DATA:[system][auth][sudo][error]} ;)? TTY=%{DATA:[system][auth][sudo][tty]} ; PWD=%{DATA:[system][auth][sudo][pwd]} ; USER=%{DATA:[system][auth][sudo][user]} ; COMMAND=%{GREEDYDATA:[system][auth][sudo][command]}",
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} groupadd(?:\[%{POSINT:[system][auth][pid]}\])?: new group: name=%{DATA:system.auth.groupadd.name}, GID=%{NUMBER:system.auth.groupadd.gid}",
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} useradd(?:\[%{POSINT:[system][auth][pid]}\])?: new user: name=%{DATA:[system][auth][user][add][name]}, UID=%{NUMBER:[system][auth][user][add][uid]}, GID=%{NUMBER:[system][auth][user][add][gid]}, home=%{DATA:[system][auth][user][add][home]}, shell=%{DATA:[system][auth][user][add][shell]}$",
          "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} %{DATA:[system][auth][program]}(?:\[%{POSINT:[system][auth][pid]}\])?: %{GREEDYMULTILINE:[system][auth][message]}"] }
        pattern_definitions => {
          "GREEDYMULTILINE"=> "(.|\n)*"
        }
        remove_field => "message"
      }
      date {
        match => [ "[system][auth][timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
      geoip {
        source => "[system][auth][ssh][ip]"
          target => "[system][auth][ssh][geoip]"
      }
    }
    else if [fileset][name] == "syslog" {
      grok {
        match => { "message" => ["%{SYSLOGTIMESTAMP:[system][syslog][timestamp]} %{SYSLOGHOST:[system][syslog][hostname]} %{DATA:[system][syslog][program]}(?:\[%{POSINT:[system][syslog][pid]}\])?: %{GREEDYMULTILINE:[system][syslog][message]}"] }
        pattern_definitions => { "GREEDYMULTILINE" => "(.|\n)*" }
        remove_field => "message"
      }
      date {
        match => [ "[system][syslog][timestamp]", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
    }
  }

  # --------------------------------------------------------------------
  # mysql
  # --------------------------------------------------------------------

  if [fileset][module] == "mysql" {
    if [fileset][name] == "error" {
      grok {
        match => { "message" => ["%{LOCALDATETIME:[mysql][error][timestamp]} (\[%{DATA:[mysql][error][level]}\] )?%{GREEDYDATA:[mysql][error][message]}",
          "%{TIMESTAMP_ISO8601:[mysql][error][timestamp]} %{NUMBER:[mysql][error][thread_id]} \[%{DATA:[mysql][error][level]}\] %{GREEDYDATA:[mysql][error][message1]}",
          "%{GREEDYDATA:[mysql][error][message2]}"] }
        pattern_definitions => {
          "LOCALDATETIME" => "[0-9]+ %{TIME}"
        }
        remove_field => "message"
      }
      mutate {
        rename => { "[mysql][error][message1]" => "[mysql][error][message]" }
      }
      mutate {
        rename => { "[mysql][error][message2]" => "[mysql][error][message]" }
      }
      date {
        match => [ "[mysql][error][timestamp]", "ISO8601", "YYMMdd H:m:s" ]
          remove_field => "[mysql][error][time]"
      }
    }
    else if [fileset][name] == "slowlog" {
      grok {
        match => { "message" => ["^# User@Host: %{USER:[mysql][slowlog][user]}(\[[^\]]+\])? @ %{HOSTNAME:[mysql][slowlog][host]} \[(IP:[mysql][slowlog][ip])?\](\s*Id:\s* %{NUMBER:[mysql][slowlog][id]})?\n# Query_time: %{NUMBER:[mysql][slowlog][query_time][sec]}\s* Lock_time: %{NUMBER:[mysql][slowlog][lock_time][sec]}\s* Rows_sent: %{NUMBER:[mysql][slowlog][rows_sent]}\s* Rows_examined: %{NUMBER:[mysql][slowlog][rows_examined]}\n(SET timestamp=%{NUMBER:[mysql][slowlog][timestamp]};\n)?%{GREEDYMULTILINE:[mysql][slowlog][query]}"] }
        pattern_definitions => {
          "GREEDYMULTILINE" => "(.|\n)*"
        }
        remove_field => "message"
      }
      date {
        match => [ "[mysql][slowlog][timestamp]", "UNIX" ]
      }
      mutate {
        gsub => ["[mysql][slowlog][query]", "\n# Time: [0-9]+ [0-9][0-9]:[0-9][0-9]:[0-9][0-9](\\.[0-9]+)?$", ""]
      }
    }
  }

  # --------------------------------------------------------------------
  # apache httpd
  # --------------------------------------------------------------------

  if [fileset][module] == "apache2" {
    if [fileset][name] == "access" {
      grok {
        match => { "message" => ["%{IPORHOST:[apache2][access][remote_ip]} - %{DATA:[apache2][access][user_name]} \[%{HTTPDATE:[apache2][access][time]}\] \"%{WORD:[apache2][access][method]} %{DATA:[apache2][access][url]} HTTP/%{NUMBER:[apache2][access][http_version]}\" %{NUMBER:[apache2][access][response_code]} %{NUMBER:[apache2][access][body_sent][bytes]}( \"%{DATA:[apache2][access][referrer]}\")?( \"%{DATA:[apache2][access][agent]}\")?( \"ct:%{DATA:[apache2][access][content-type]}\")?",
          "%{IPORHOST:[apache2][access][remote_ip]} - %{DATA:[apache2][access][user_name]} \\[%{HTTPDATE:[apache2][access][time]}\\] \"-\" %{NUMBER:[apache2][access][response_code]} -" ] }
        remove_field => "message"
      }
      mutate {
        add_field => { "read_timestamp" => "%{@timestamp}" }
      }
      date {
        match => [ "[apache2][access][time]", "dd/MMM/YYYY:H:m:s Z" ]
          remove_field => "[apache2][access][time]"
      }
      useragent {
        source => "[apache2][access][agent]"
          target => "[apache2][access][user_agent]"
          remove_field => "[apache2][access][agent]"
      }
      geoip {
        source => "[apache2][access][remote_ip]"
          target => "[apache2][access][geoip]"
      }
      csv {
        source => "[apache2][access][url]"
          separator => "/"
          target => "[apache2][access][urlparsed2]"
          skip_empty_columns => true 
      }

      grok {
        match => { "source" => ["/var/log/httpd/%{DATA:[apache2][access][vhost]}_access.log",
          "/var/log/httpd/%{DATA:[apache2][access][vhost]}_log" ] }
        remove_field => "source"
      }


    }
    else if [fileset][name] == "error" {
      grok {
        match => { "message" => ["\[%{APACHE_TIME:[apache2][error][timestamp]}\] \[:%{DATA:[apache2][error][loglevel]}\] \[pid %{POSINT}\] \[client %{IPORHOST:[apache2][error][php_client]}:%{POSINT}\] PHP %{DATA:[apache2][error][php_error_level]}: %{DATA:[apache2][error][php_error]} in %{DATA:[apache2][error][php_file]} on line %{POSINT:[apache2][error][php_line]}(, referer: %{DATA:[apache2][error][referer]})?",
          "\[%{APACHE_TIME:[apache2][error][timestamp]}\] \[%{DATA:[apache2][error][loglevel]}\] \[pid %{POSINT}\] \[client %{IPORHOST:[apache2][error][php_client]}:%{POSINT}\] %{DATA:[apache2][error][php_id]}: %{DATA:[apache2][error][php_error]}: %{DATA:[apache2][error][php_file]}" ] }
        pattern_definitions => {
          "APACHE_TIME" => "%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR}"
        }
        remove_field => "message"
      }
      date {
        match => [ "[apache2][error][timestamp]", "EEE MMM dd H:m:s YYYY", "EEE MMM dd H:m:s.SSSSSS YYYY" ]
          remove_field => "[apache2][error][timestamp]"
      }
    }
  }

  # --------------------------------------------------------------------
  # mail ( sendmail, lmtp et imap )
  # --------------------------------------------------------------------

  if [program] == "sendmail" {

    grok {
      patterns_dir => "/etc/logstash/patterns/maillog"
        match => [ "syslog_message", "%{SENDMAIL}" ]
    }

    mutate {
      add_field => { "type_log" => "mail-log" }
      remove_field => [ "message" ]
        remove_field => [ "syslog_message" ]
        remove_tag => [ "syslog_message_unparsed" ]

    }

  }


  if [program] == "lmtpunix" {

    drop { }

  }


  if [program] == "imaps" or [program] == "imap" {

    if !("login" in [syslog_message])  {
      drop { }
    }


    grok {
      patterns_dir => "/etc/logstash/patterns/maillog"
        match => [ "syslog_message", "%{IMAP}" ]
    }


    mutate {
      add_field => { "type_log" => "mail-log" }
      remove_field => [ "message" ]
        remove_field => [ "syslog_message" ]
        remove_tag => [ "syslog_message_unparsed" ]
    }

    if [syslog_client_ip] {
      geoip {
        source => "syslog_client_ip"
      }        
    }
  }

  # --------------------------------------------------------------------
  # radiusd
  # --------------------------------------------------------------------


  if [program] == "radiusd" {

    grok {
      patterns_dir => "/etc/logstash/patterns/radiuslog"
      match => [ "syslog_message", "%{FREERADIUS}" ]
    }

    mutate {
      add_field => { "type_log" => "radius-log" }
      remove_field => [ "message" ]
      remove_field => [ "syslog_message" ]
      remove_tag => [ "syslog_message_unparsed" ]

    }

  }


  # --------------------------------------------------------------------
  # Suppression du tag d'erreur
  # --------------------------------------------------------------------

  if "_grokparsefailure" in [tags] {
    drop {}
  }


#// end filter
}

####################################################
# Sauvegarde dans le cluster ES 
####################################################


output {

  # --------------------------------------------------------------------
  # mail
  # --------------------------------------------------------------------

  if [type_log] == "mail-log" {
    elasticsearch {
      hosts => [ "localhost:9200" ]
        cacert => "/etc/logstash/digicert_certifs/DigiCertCA.crt"
        ssl => true
        ssl_certificate_verification => true
        user => logstash
        password => logstash
        manage_template => true
        index => "filebeat-maillog-%{+YYYY.MM.dd}"
        template => "/etc/logstash/conf.d/template-maillog.json"
        template_name => "filebeat-maillog"
    }
  }
  # --------------------------------------------------------------------
  # radius
  # --------------------------------------------------------------------

  else if [program] == "radiusd" {
    elasticsearch {
      hosts => [ "localhost:9200" ]
        cacert => "/etc/logstash/digicert_certifs/DigiCertCA.crt"
        ssl => true
        ssl_certificate_verification => true
        user => logstash
        password => logstash
        manage_template => true
        index => "filebeat-radiuslog-%{+YYYY.MM.dd}"
     }
  }
  # --------------------------------------------------------------------
  # apache
  # --------------------------------------------------------------------

  else if [fileset][module] == "apache2" {
    elasticsearch {
      hosts => [ "localhost:9200" ]
        cacert => "/etc/logstash/digicert_certifs/DigiCertCA.crt"
        ssl => true
        ssl_certificate_verification => true
        user => logstash
        password => logstash
        manage_template => true
        index => "filebeat-apache-%{+YYYY.MM.dd}"
        template => "/etc/logstash/conf.d/template-apache.json"
        template_name => "filebeat-apache"
    }
  }
  # --------------------------------------------------------------------
  # autre
  # --------------------------------------------------------------------

  else {
    elasticsearch {
      hosts => [ "localhost:9200" ]
        cacert => "/etc/logstash/digicert_certifs/DigiCertCA.crt"
        ssl => true
        ssl_certificate_verification => true
        user => logstash
        password => logstash
        index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    }
  }

#// end output
}
